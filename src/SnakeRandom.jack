class Random {
    field int seed;
    field int lastDirection;
    field int stepCounter;
    field int stepsToUpdate;

    constructor Random new(int initialSeed) {
        let seed = initialSeed;
        return this;
    }

    method void updateDirection(int direction) {
        let lastDirection = direction;
        return;
    }

    method int getSeed() {
        return seed;
    }

    method int nextInt() {
        var int temp;
        let temp = BitOperations.xor(seed, BitOperations.shiftLeft(seed, 7));
        let temp = BitOperations.xor(temp, BitOperations.shiftRight(temp, 9));
        let temp = BitOperations.xor(temp, BitOperations.shiftLeft(temp, 8));
        let seed = temp;

        return seed;
    }

    method int nextIntRange(int min, int max) {
        var int range, randomValue, remainder;

        let range = max - min + 1;
        let randomValue = Math.abs(nextInt());
        let remainder = randomValue - (range * (randomValue / range));

        return min + remainder;
    }

    method void updateSeedWithDirection(int direction) {
        let seed = BitOperations.xor(seed, direction);
        let seed = BitOperations.shiftLeft(seed, 3);
        let seed = BitOperations.xor(seed, BitOperations.shiftRight(seed, 5));
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}