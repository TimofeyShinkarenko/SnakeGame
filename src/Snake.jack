class Snake {
    field Node head, tail;
    field int direction, segmentSize;

    static int directionUp;
    static int directionRight;
    static int directionDown;
    static int directionLeft;
    static int screenHeight;
    static int screenWidth;

    constructor Snake new(int startX, int startY, int snakeSize, int initialSegmentSize) {
        let directionUp = 0;
        let directionRight = 1;
        let directionDown = 2;
        let directionLeft = 3;
        let screenHeight = 256;
        let screenWidth = 512;

        let segmentSize = initialSegmentSize;
        let direction = directionRight;

        let head = Node.new(Segment.new(startX, startY, segmentSize));
        let tail = head;

        while (snakeSize > 0) {
            do addSegment();
            let snakeSize = snakeSize - 1;
        }

        return this;
    }

    method int getDirection() { 
        return direction; 
    }

    method int getSegmentSize() { 
        return segmentSize; 
    }

    method void setDirection(int newDirection) {
        if (~(Math.abs(direction - newDirection) = 2)){
            let direction = newDirection;
        }
        return;
    }

    method void addSegment() {
        var Segment newSegment;
        var Segment headSegment;
        var int x1, y1, x2, y2;

        let headSegment = head.getData();
        let x1 = headSegment.getX1();
        let y1 = headSegment.getY1();
        let x2 = headSegment.getX2();
        let y2 = headSegment.getY2();

        let newSegment = calculateNewSegment(x1, y1, x2, y2);
        do addNewSegmentToHead(newSegment);

        return;
    }

    method Segment calculateNewSegment(int x1, int y1, int x2, int y2) {
        if (direction = directionUp) {
            let y1 = y1 - segmentSize;

            if (y1 < 0) {
                let y1 = screenHeight - segmentSize;
            }
        }
        if (direction = directionRight) {
            let x1 = x1 + segmentSize;
            let x2 = x2 + segmentSize;
            if (x2 > screenWidth) {
                let x1 = 0;
            }
        }
        if (direction = directionDown) {
            let y1 = y1 + segmentSize;
            let y2 = y2 + segmentSize;
            if (y2 > screenHeight) {
                let y1 = 0;
            }
        }
        if (direction = directionLeft) {
            let x1 = x1 - segmentSize;
            if (x1 < 0) {
                let x1 = screenWidth - segmentSize;
            }
        }

        return Segment.new(x1, y1, segmentSize);
    }

    method void addNewSegmentToHead(Segment newSegment) {
        var Node newNode;

        let newNode = Node.new(newSegment);
        do newNode.setNext(head);
        do head.setPrevious(newNode);
        let head = newNode;

        return;
    }

    method void removeTail() {
        var Node oldTail;
        var Segment tailSegment;

        let oldTail = tail;
        let tail = tail.getPrevious();
        do tail.setNext(null);

        let tailSegment = oldTail.getData();
        do Screen.setColor(false);
        do Screen.drawRectangle(tailSegment.getX1(), tailSegment.getY1(), 
                                tailSegment.getX2(), tailSegment.getY2());
        do Screen.setColor(true);

        do oldTail.dispose();
        return;
    }

    method void move() {
        do addSegment();
        do removeTail();
        do drawHead();
        return;
    }

    method void drawHead() {
        var Segment headSegment;
        let headSegment = head.getData();
        do Screen.drawRectangle(headSegment.getX1(), headSegment.getY1(), 
                                headSegment.getX2(), headSegment.getY2()); 
        return;
    }

    method void dispose() {
        var Node current, nextNode;
        let current = head;
        while (~(current = null)) {
            let nextNode = current.getNext();
            do current.dispose();
            let current = nextNode;
        }
        do Memory.deAlloc(this);
        return;
    }
}